from sklearn.neighbors import NearestNeighbors
import numpy as np

class DifferenceImageGenerator:
    def __init__(self, n_neighbors=5):
        """
        Initialize the DifferenceImageGenerator.

        Parameters:
        - n_neighbors: Number of nearest neighbors to consider for computing difference images.
        """
        self.n_neighbors = n_neighbors

    def fit(self, dataset):
        """
        Fit the k-nearest neighbors model on the dataset.

        Parameters:
        - dataset: numpy array of shape (num_samples, height, width, channels)
                   representing the dataset of images.
        """
        num_samples = dataset.shape[0]
        height, width, channels = dataset.shape[1:]

        # Reshape the dataset into a 2D array
        X_flat = dataset.reshape(num_samples, -1)

        # Fit k-nearest neighbors
        self.neighbours = NearestNeighbors(n_neighbors=self.n_neighbors).fit(X_flat)

    def transform(self, dataset):
        """
        Compute difference images for the given dataset based on nearest neighbors.

        Parameters:
        - dataset: numpy array of shape (num_samples, height, width, channels)
                   representing the dataset of images.

        Returns:
        - difference_dataset: numpy array of shape (num_samples, height, width, channels)
                              representing the dataset of difference images.
        """
        num_samples = dataset.shape[0]
        height, width, channels = dataset.shape[1:]

        difference_dataset = np.zeros_like(dataset)

        # Get nearest neighbors
        distances, indices = self.neighbours.kneighbors(dataset.reshape(num_samples, -1))

        for i in range(num_samples):
            differences = []
            for n in indices[i]:
                # Compute pixel-wise absolute difference between the images
                difference_image = np.abs(dataset[i] - dataset[n])
                differences.append(difference_image)
            # Average the differences from nearest neighbors
            avg_difference_image = np.mean(differences, axis=0)
            difference_dataset[i] = avg_difference_image

        return difference_dataset
